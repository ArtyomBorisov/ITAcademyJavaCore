home_work_6.comparators:
    - ComparatorMapValue - компаратор для сравнения объектов типа Map.Entry по значению (value).

home_work_6.readerTxt:
    - ReaderTxt - класс для преобразования файла txt в строку String.

home_work_6.runners:
    - Main1 - п.2.1: Найти в тексте все использованные слова и поместить их в коллекцию Set.
    - Main2 - п.2.2: Найти в тексте топ N (настраиваемое значение) слов и вывести количество этих слов используя Map и
                     List. Отсортировать по количеству. Распечатать в консоль.
    - Main3 - п.5: Используя реализации интерфейса ISearchEngine вывести информацию как часто встречаются слова "война",
                   "и" (как союз), "мир" вне зависимости от регистра.

home_work_6.search.api:
    - ISearchEngine - интерфейс из п.3

home_work_6.search.decorators:
    - SearchEngineCaseInsensitive - п.4.4: Написать декоратор для ISearchEngine который будет позволять искать данные
                                           без учёта регистра.
    - SearchEnginePunctuationNormalizer - п.4.3: Написать декоратор для ISearchEngine, который будет удалять
                                                 нежелательные символы. Любые знаки препинания, лишние пробелы и
                                                 например переводы строк.

home_work_6.search.simple:
    - EasySearch - п.4.1: Написать класс EasySearch. Реализовать поиск используя метод indexOf из класса String.
                          В данной реализации запрещено использовать регулярные выражения в любом виде, для любых задач.
                          Данный класс ищет слова с учётом регистра.
    - RegExSearch - п.4.2: Написать класс RegExSearch реализующий интерфейс ISearchEngine. Реализовать поиск при помощи
                           класса Matcher. Данный класс ищет слова с учётом регистра.